name: Build Servers

env:
  CARGO_TERM_COLOR: always

on:
  workflow_dispatch

jobs:
  build_linux_streamer:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          repository: "alvr-org/ALVR"
          ref: ${{ needs.prepare_release.outputs.release_ref }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build and install dependencies
        env:
          RUST_BACKTRACE: 1
        run: |
          sudo add-apt-repository universe
          sudo apt-get update
          sudo apt-get install libfuse2 build-essential pkg-config nasm libva-dev libdrm-dev libx264-dev libx265-dev cmake libasound2-dev libjack-jackd2-dev libxrandr-dev libunwind-dev libffmpeg-nvenc-dev nvidia-cuda-toolkit libx11-xcb-dev libxkbcommon-dev libwayland-dev libxrandr-dev

          export CMAKE_BUILD_TYPE=Release
          git clone https://github.com/KhronosGroup/Vulkan-Loader.git
          cd Vulkan-Loader
          mkdir build
          cd build
          cmake -DUPDATE_DEPS=ON ..
          make

          export LD_LIBRARY_PATH="$(pwd)/loader:$LD_LIBRARY_PATH"

          cp packaging/deb/cuda.pc /usr/share/pkgconfig
          cargo xtask prepare-deps --platform linux
      - name: Build and package ALVR
        env:
          RUST_BACKTRACE: 1
        run: |
          cargo xtask bump --nightly
          cargo xtask package-streamer

      - name: Build and package ALVR (AppImage)
        env:
          RUST_BACKTRACE: 1
        run: |
          cargo xtask package-streamer --appimage --zsync
      - name: Upload linux streamer (AppImage)
        uses: actions/upload-artifact@v3
        with:
          path: ./build/ALVR-x86_64.AppImage
          name: ALVR-x86_64.AppImage

